{
  "author": {
    "name": "DaWanda GmbH",
    "email": "sascha@dawanda.com",
    "url": "http://dawanda.com"
  },
  "name": "jquery-rss",
  "description": "An easy-to-use rss plugin for jquery with templating.",
  "version": "1.3.1",
  "homepage": "https://github.com/dawanda/jquery-rss",
  "keywords": [
    "rss",
    "jquery",
    "ender"
  ],
  "ender": "noop",
  "repository": {
    "type": "git",
    "url": "git://github.com/dawanda/jquery-rss.git"
  },
  "contributors": [
    {
      "name": "Sascha Depold",
      "email": "sascha@depold.com"
    },
    {
      "name": "Steffen Schröder",
      "email": "steffen@schroeder-blog.de"
    }
  ],
  "main": "src/jquery.rss.js",
  "scripts": {
    "test": "java -jar dist/compiler.jar src/jquery.rss.js --js_output_file=dist/jquery.rss.min.js && node_modules/.bin/buster-test"
  },
  "engines": {
    "node": ">=v0.4.8"
  },
  "dependencies": {},
  "devDependencies": {
    "buster": "~0.6.0"
  },
  "readme": "## jquery.rss\n\nThis plugin can be used to read a RSS feed (via the Google Feed API) and transform it into a custom piece of HTML.\n\n## Setup\n\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>jquery.rss example</title>\n        <script src=\"lib/jquery-1.6.4.min.js\"></script>\n        <script src=\"src/jquery.rss.js\"></script>\n        <script>\n          jQuery(function($) {\n            $(\"#rss-feeds\").rss(\"http://feeds.feedburner.com/premiumpixels\")\n          })\n        </script>\n      </head>\n      <body>\n        <div id=\"rss-feeds\"></div>\n      </body>\n    </html>\n\n## Options\n\n    $(\"#rss-feeds\").rss(\n      \"http://feeds.feedburner.com/premiumpixels\",\n      {\n        // how many entries do you want?\n        // default: 4\n        // valid values: any integer\n        limit: 10,\n\n        // will request the API via https\n        // default: false\n        // valid values: false, true\n        ssl: true,\n\n        // outer template for the html transformation\n        // default: \"<ul>{entries}</ul>\"\n        // valid values: any string\n        layoutTemplate: '<div class='feed-container'>{entries}</div>',\n\n        // inner template for each entry\n        // default: '<li><a href=\"{url}\">[{author}@{date}] {title}</a><br/>{shortBodyPlain}</li>'\n        // valid values: any string\n        entryTemplate: '<p>{title}</p>',\n\n        // additional token definition for in-template-usage\n        // default: {}\n        // valid values: any object/hash\n        tokens: {\n          foo: 'bar',\n          bar: function(entry, tokens) { return entry.title }\n        },\n\n        // output mode of google feed loader request\n        // default: 'json'\n        // valid values: 'json', 'json_xml'\n        outputMode: 'json_xml',\n\n        // the effect, which is used to let the entries appear\n        // default: 'show'\n        // valid values: 'show', 'slide', 'slideFast', 'slideSynced', 'slideFastSynced'\n        effect: 'slideFastSynced',\n\n        // a callback, which gets triggered when an error occures\n        // default: function() { throw new Error(\"jQuery RSS: url don't link to RSS-Feed\") }\n        error: function(){},\n\n        // a callback, which gets triggered when everything was loaded successfully\n        // this is an alternative to the next parameter (callback function)\n        // default: function(){}\n        success: function(){}\n      },\n\n      // callback function\n      // called after feeds are successfully loaded and after animations are done\n      function callback() {}\n    )\n\n## Templating\n\nAs seen in the options, you can specify a template in order to transform the json objects into HTML. In order to that, you can either define the outer template (which describes the html around the entries) or the entry template (which describes the html of an entry).\n\nThe basic format of those templates are:\n\n    # layoutTemplate:\n    \"<outer-html>{entries}</outer-html>\"\n\n    # entryTemplate:\n    \"<any-html>{token1}{token2}</any-html>\"\n\nSo, let's say you have specified a limit of 2, using the upper pseudo html. This will result in the following:\n\n    <outer-html>\n      <any-html>{token1}{token2}</any-html>\n      <any-html>{token1}{token2}</any-html>\n    </outer-html>\n\nThere are some predefined tokens:\n\n- url: the url to the post\n- author: the author of the post\n- date: the publishing date\n- title: the title of the post\n- body: the complete content of the post\n- shortBody: the shortened content of the post\n- bodyPlain: the complete content of the post without html\n- shortBodyPlain: the shortened content of the post without html\n- teaserImage: the first image in the post's body\n- teaserImageUrl: the url of the first image in the post's body\n- index: the index of the current entry\n- totalEntries: the total count of the entries\n\nYou can also define custom tokens using the ```tokens``` option:\n\n    $('#foo').rss(url, {\n      entryTemplate: \"{dynamic}, {static}, {re-use}\",\n      tokens: {\n        dynamic: function(entry, tokens){ return \"dynamic-stuff: \" + entry.title },\n        \"re-use\": function(entry, tokens){ return encodeURIComponent(tokens.teaserImageUrl) },\n        static: \"static\"\n      }\n    })\n\nPlease make sure to NOT define infinite loops. The following example is really BAD:\n\n    $('#foo').rss(url, {\n      entryTemplate: \"{loop}\",\n      tokens: {\n        whoops: function(entry, tokens) { return tokens.loop() }\n        loop: function(entry, tokens) { return tokens.whoops() }\n      }\n    })\n\nHere is a real-world example:\n\n    $('#foo').rss(url, {\n      layoutTemplate: \"<table><tr><th>Title</th></tr>{entries}</table>\",\n      entryTemplate:  \"<tr><td>{title}</td></tr>\"\n    })\n\n## Filtering\n\nThe plugin also allows you to filter specific entries in order to only print them:\n\n    $(\"#foo\").rss(url, {\n      limit: 100,\n      filterLimit: 10,\n      filter: function(entry, tokens) {\n        return tokens.title.indexOf('my filter') > -1\n      }\n    })\n\nThis will request 100 entries via the Feed API and renders the first 10 matching entries.\n\n## Testing\n\nThe test suite is using BusterJS. To execute the tests you need to run a buster server, capture a browser and finally do `npm test`. The server can be started via `node_modules/.bin/buster server`. Afterwards open `http://localhost:1111/capture`.\n\n## Authors/Contributors\n\n- DaWanda GmbH ([Website](http://dawanda.com))\n- Sascha Depold ([Twitter](http://twitter.com/sdepold) | [Github](http://github.com/sdepold) | [Website](http://depold.com))\n- Steffen Schröder  ([Twitter](http://twitter.com/ChaosSteffen) | [Github](http://github.com/ChaosSteffen) | [Website](http://schroeder-blog.de))\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dawanda/jquery-rss/issues"
  },
  "_id": "jquery-rss@1.3.1",
  "dist": {
    "shasum": "9f4a4bc0a273ad7029143b1050700a7dc730de87"
  },
  "_from": "jquery-rss@",
  "_resolved": "https://registry.npmjs.org/jquery-rss/-/jquery-rss-1.3.1.tgz"
}
